datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model guild {
  id                    String                   @unique
  uri                   uri[]
  invites               user_invite[]
  punishments           punishment[]
  session_uri           session_uri[]
  rtm_enabled           Boolean                  @default(false)
  rtm_channel_id        String                   @default("")
  embeds                embed[]
  um_enabled            Boolean                  @default(false)
  um_welcome_raw_msg    String                   @default("")
  um_welcome_msg        String                   @default("")
  um_welcome_channel_id String                   @default("")
  um_leave_raw_msg      String                   @default("")
  um_leave_channel_id   String                   @default("")
  um_leave_msg          String                   @default("")
  rr_enabled            Boolean                  @default(false)
  rr_templates          reaction_role_template[]
  rr_msgs               reaction_role_msg[]
}

model reaction {
  id          String                 @unique
  template    reaction_role_template @relation(references: [id], fields: [template_id], onUpdate: Cascade, onDelete: Cascade)
  template_id String
  reaction    String
  role_id     Int
}

model button {
  id          String                 @unique
  template_id String
  template    reaction_role_template @relation(references: [id], fields: [template_id], onUpdate: Cascade, onDelete: Cascade)
  label       String
  color       String
  role_id     Int
}

model reaction_role_template {
  id        String              @unique
  guild_id  String
  guild     guild               @relation(references: [id], fields: [guild_id], onUpdate: Cascade, onDelete: Cascade)
  content   String?
  embed     embed?              @relation(references: [id], fields: [embed_id])
  embed_id  Int?
  reactions reaction[]
  buttons   button[]
  messages  reaction_role_msg[]
}

model reaction_role_msg {
  guild       guild                  @relation(references: [id], fields: [guild_id], onDelete: Cascade, onUpdate: Cascade)
  guild_id    String
  msg_id      String                 @unique
  template    reaction_role_template @relation(references: [id], fields: [template_id], onUpdate: Cascade, onDelete: Cascade)
  template_id String
}

model session_uri {
  token    String @unique
  guild    guild  @relation(references: [id], fields: [guild_id], onUpdate: Cascade, onDelete: Cascade)
  guild_id String
  user_id  String
}

model uri {
  token    String @unique
  guild    guild  @relation(references: [id], fields: [guild_id], onUpdate: Cascade, onDelete: Cascade)
  guild_id String
  user_id  String
}

model user_invite {
  id           String   @unique
  guild_id     String
  guild        guild    @relation(references: [id], fields: [guild_id], onUpdate: Cascade, onDelete: Cascade)
  inviter_id   String
  joined_id    String
  invite_id    String
  valid        Boolean
  date_created DateTime
}

model punishment {
  id          String         @unique
  user_id     String
  guild_id    String
  guild       guild          @relation(references: [id], fields: [guild_id], onUpdate: Cascade, onDelete: Cascade)
  type        PunishmentType
  date        DateTime
  punisher_id String
  reason      String         @default("No reason specified")
  time        String         @default("")
}

model embed {
  id              Int                      @unique @default(autoincrement())
  guild_id        String
  guild           guild                    @relation(references: [id], fields: [guild_id], onUpdate: Cascade, onDelete: Cascade)
  title           String?
  url             String?
  description     String?
  color           Int?
  footer_text     String?
  footer_icon_url String?
  image_url       String?
  thumbnail_url   String?
  author_name     String?
  author_url      String?
  author_icon_url String?
  reaction_role   reaction_role_template[]
  fields          embed_field[]
}

model embed_field {
  id       Int      @unique @default(autoincrement())
  embed_id Int
  embed    embed    @relation(references: [id], fields: [embed_id], onUpdate: Cascade, onDelete: Cascade)
  name     String
  value    String
  inline   Boolean?
}

enum PunishmentType {
  BAN
  KICK
  TIMEOUT
}
